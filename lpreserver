#!/bin/sh
# Command-line interaction script for life-preserver
# Author: Kris Moore
# License: BSD
# "Life-Preserver" Copyright 2013 PC-BSD Software (iXsystems)
######################################################################

# Source external functions
. /usr/local/share/trueos/scripts/functions.sh

# Set a default pager
PAGER=${PAGER:-more}

require_root()
{
  UTEST="`whoami`"
  if [ "$UTEST" != "root" ] ; then
     exit_err "This command must be run as root!"
  fi
}

# Source our functions
PROGDIR="/usr/local/share/lpreserver"

# Source our local functions
. ${PROGDIR}/backend/functions.sh

title()
{
  echo "Life-Preserver
---------------------------------"
};


# Function to display help information
help_main()
{
  title

cat<<__EOF__
Available commands

Type in help <command> for information and usage about that command

       help - This help file or the help for the specified command

   cronsnap - Manage scheduled snapshots
  cronscrub - Manage scheduled scrubs
   snapshot - Manage snapshot tasks
  replicate - Manage replication tasks
        set - Set lpreserver options
        get - Get list of lpreserver options
     status - List datasets, along with last snapshot / replication date
__EOF__
};

help_replicate()
{
 title
 echo "Help replicate

Manage Life-Preserver replication tasks

Replication uses ZFS to send your snapshots to a remote system which also has
a ZFS pool, such as FreeNAS or another PC-BSD system. The <hostdataset> must
also be scheduled for snapshots for replication to occur.

On the remote system, you will need to have created the <remotedataset>
beforehand.

If you plan to replicate to a non-root user, please set the following
permissions on the remote dataset:

# zfs allow -u <user> \\
  atime,canmount,clone,compression,create,destroy,hold,mount,mountpoint,promote,receive,rename,send,userprop <remotedataset>

Usage:

  lpreserver replicate <subcommand> <options>


Available subcommands:

          add - Add a new replication target
       expand - Expand the remote iSCSI zpool
       export - Export / Offline an iSCSI zpool
       import - Import / Online an iSCSI zpool
         init - Initialize the remote side again
         list - List replication targets
       remove - Remove a replication target
          run - Start a replication manually
    saveiscsi - Save the iSCSI config data / GELI key
      exclude - Exclude datasets from replication
    rmexclude - Remove datasets from exclude list for replication
  listexclude - List excluded datasets from replication
  pruneremote - Remove remote datasets on target host which no longer exist on
		local host


add options:

	add <remotehost> <user> <port> <hostdataset> <remotedataset> <time>

	add iscsi <*.lps file> <hostdataset> <time> [geli key]

	add iscsi <*.lpiscsi file> <hostdataset> <time> [password file]

	<time> = XX/sync/hour/30min/10min/manual
	     XX= Time to perform replication (in 24 notation)
	   sync= Do replication with snaps (Not recommended for frequent snaps)
	   hour= Replicate hourly
	  30min= Replicate every 30 minutes
	  10min= Replicate every 10 minutes
alternating= Replicate once every 48 hours (Using even/odd day of month)
     manual= Only replicate when requested by user

	Example 1:

	add freenas.8343 backupuser 22 tank1 tankbackup/backups sync

	Will schedule replication of tank1 to tankbackup/backups with
	each snapshot

	Example 2:

	add freenas.8343 backupuser 22 tank1 tankbackup/backups 22

	Will schedule replication of tank1 to tankbackup/backups at 10PM,
	notated in 24hour time

expand options:

	expand <localdataset/zpool> <target host>

	Will expand the iSCSI-hosted zpool to the new size of the remote volume.
	For obvious reasons, this should only be done after the remote host has
	increased the size of the remote iSCSI volume.

	NOTE: This can only be used to grow a zpool, shrinking is not permitted.

export options:

	export <localdataset/zpool> <target host>

	Exports the backup iSCSI zpool associated with the local dataset or
	zpool replication specified for <target host>

import options:

	import <localdataset/zpool> <target host>

	Imports the backup iSCSI zpool associated with the local dataset or
	zpool replication specified for <target host>


init options:

	init <localdataset/zpool> <target host>

	Will re-init the remote side of the replication. This can be useful
	when your replication gets stuck. Doing this option will remove
	all the data on the remote side, and require a full re-sync again.

remove options:

	remove <dataset> <target host>

	Remove a replication task indicated by <dataset>
        Use 'replicate list' for a list of IDs.

run options:

	run <dataset> <target host>

	Starts a manual replication for <dataset> streaming to <target host>

saveiscsi options:

	saveiscsi <localdataset/zpool> <target host> [password file]
	saveiscsi geli <localdataset/zpool> <target host> [password file]

	Creates a GELI encrypted file, which contains all the iSCSI connection
	information and GELI key for the replication target. Will prompt for
	the password to set on this GELI encrypted file.

	This file can then be used with the "replicate add" command to import
	the backup zpool on another system or from the PC-BSD install media.

    saveiscsi openssl <localdataset/zpool> <target host> <key>

    Generates a random password for the GELI encrypted file described above and
    then saves the password file and the GELI encrypted file in a tar which is
    encrypted to an SMIME public key using OpenSSL

exclude options:

	exclude <dataset> <exclude dataset> <exclude dataset> ...

	Exclude one or more datasets from replication.

	Examples:

	lpreserver replicate exclude tank1 tank1/tmp tank1/var/tmp

	Exclude dataset tank1/tmp and tank1/var/tmp from replication for
	dataset tank1.

rmexclude options:

	rmexclude <dataset> <excluded dataset> <excluded dataset> ...

	Remove exclusion for one or more datasets that was previously excluded
	from replication.  This removes the datasets from the exclude list.

	Examples:

	lpreserver replicate rmexclude tank1 tank1/tmp tank1/var/tmp

	Remove excluded dataset tank1/tmp and tank1/var/tmp on dataset tank1
	for replication.

	Dataset tank1/tmp and tank1/var/tmp on dataset tank1 are no longer
	excluded from replication.

listexclude options:

	listexclude <dataset>

	List which datasets are excluded from replication.

pruneremote options:

	pruneremote <dataset> <target host>

	Remove remote datasets on target host which no longer exist on local
	host.

	Examples:

	lpreserver replicate pruneremote tank1 freenas.8343


Examples:

  # lpreserver replicate run tank1 freenas.example.org


  # lpreserver replicate init tank1 freenas.example.org

" | $PAGER
};


help_set()
{
 title
 echo "Help set

Set Life-Preserver options

Usage:

  lpreserver set

Config options

     duwarn - Set to a disk percentage [0-99] at which to warn of low disk space

    duprune - Set to a disk percentage [0-99] at which to begin removing old
              snapshots

      email - Set the e-mail address to receive notifications
		This will require that the \"mail\" command is setup for
		outgoing mail

  emailopts - (ALL/WARN/ERROR)
		  ALL - Send mail for every snapshot, plus warnings and errors
		 WARN - Send mail for warnings and errors (Default)
		ERROR - Send mail for errors only

  recursive - (ON/OFF)
		   ON - Will create / destroy snapshots recursively, for all
			children of a target zpool/dataset. (Default)
		  OFF - Will only create / destroy snapshots on the specified
			dataset.

pruneremote - (ON/OFF)
		   ON - During replication this will prune remote datasets on
			destination which are no longer available on the
			source.
		  OFF - During replication this will NOT prune remote datasets
			on destination which are no longer available on the
			source. (Default)

			For manual pruning see the 'lpreserver replicate
			pruneremote' command.

Example:

  lpreserver set email "kris@example.org,admin@example.org"

  lpreserver set emailopts ALL
"
};

help_get()
{
 title
 echo "Help get

Listing of Life-Preserver options set

Usage:

  lpreserver get

Example:

  lpreserver get
"
};

help_status()
{
 title
 echo "Help status

List monitored dataset's last snapshot and replication

Usage:

  lpreserver status

"
};


help_cronsnap()
{
 title
 echo "Help cronsnap

Schedule a ZFS snapshot

Usage:

  lpreserver cronsnap <subcommand> <options>

Available subcommands:

        start - Schedule snapshots for a dataset
         stop - Stop scheduled snapshots for a dataset.
         list - List scheduled snapshots
      exclude - Exclude datasets for scheduled snapshots
    rmexclude - Remove datasets from exclude list for scheduled snapshots
  listexclude - List excluded datasets for scheduled snapshots


start options:

	start <dataset> <frequency> <numToKeep>

	frequency = auto / daily@XX / hourly / 30min / 10min / 5min
		                 ^^ Hour to execute
	numToKeep = Number of snapshots to keep total

	NOTE: When frequency is set to "auto" the following will take place:
	* Snapshots will be created every 5 minutes and kept for an hour.
	* A hourly snapshot will be kept for a day.
	* A daily snapshot will be kept for a month.
	* A Monthly snapshot will be kept for a year.
	* The life-preserver daemon will also keep track of the zpool disk
	  space, if the capacity falls below 75%, the oldest snapshot will be
	  auto-pruned.

	Examples:

	lpreserver cronsnap start tank1/usr/home/kris daily@22 10

	Schedule snapshots of dataset tank1/usr/home/kris daily at 22:00.
	10 snapshots will be kept.

stop options:

	stop <dataset>

list options:

	list <dataset>

	List all snapshot schedules for a dataset.
	If no dataset is given it will list schedules for all datasets.

exclude options:

	exclude <dataset> <exclude dataset> <exclude dataset> ...

	Exclude one or more datasets from scheduled snapshots.

	Examples:

	lpreserver cronsnap exclude tank1/usr/home/kris tank1/usr/home/kris/tmp tank1/usr/home/kris/test

	Exclude dataset tank1/usr/home/kris/tmp and tank1/usr/home/kris/test
	from scheduled snapshots on dataset tank1/usr/home/kris.

rmexclude options:

	rmexclude <dataset> <excluded dataset> <excluded dataset> ...

	Remove exclusion for one or more datasets that was previously excluded
	from scheduled snapshots.  This removes the datasets from the exclude
	list.

	Examples:

	lpreserver cronsnap rmexclude tank1/usr/home/kris tank1/usr/home/kris/tmp tank1/usr/home/kris/test

	Dataset tank1/usr/home/kris/tmp and tank1/usr/home/kris/test on dataset
	tank1/usr/home/kris are no longer excluded for scheduled snapshots.

listexclude options:

	listexclude <dataset>

	List which datasets are excluded from schedule snapshots.
"
};

help_cronscrub()
{
 title
 echo "Help cronscrub

Schedule a ZFS scrub

Usage:

  lpreserver cronscrub <subcommand> <options>

Available subcommands:

       start - Schedule scrub for a pool
        stop - Stop scheduled scrub for a pool
        list - List scheduled scrubs


start options:

	start <pool> <frequency>

	frequency = VV / daily@XX / weekly@YY@XX / monthly@ZZ@XX
	VV = Execute at every VV days, XX = Hour to execute,
	YY = Day of week to execute, ZZ = Day of month to execute

	NOTE:
	Frequency has two modes, regular cron and anacron.
	If you specify a number or 'daily', 'weekly' and 'monthly' without
	the '@' sign you setup anacron. When you specify with the '@' sign you
	setup cron.  If you want to be sure that your scrub is always run use
	anacron.

	If 'daily' is given you set the period to every day.
	If 'weekly' is given you set the period to every 7 days.
	If 'monthly' is given you set the period to every 30 days.

	If 'daily@' is given without hour the default is 22.
	If 'weekly@' is given without day or hour the default is day 1 and
		hour 22.  (1 = Mon, 7 = Sun)
	If 'monthly@' is given without day or hour the default is day 1 and
		hour 22.

	Examples:

	lpreserver cronscrub start tank1 weekly
	(run scrub every 7 days)

	lpreserver cronscrub start tank1 45
	(run scrub every 45 days)

	lpreserver cronscrub start tank1 daily@22
	(run scrub everyday at 10 AM)

	lpreserver cronscrub start tank1 weekly@5@5
	(run scrub every Friday at 5 PM)

	lpreserver cronscrub start tank1 monthly@21@13
	(run scrub on the 21:st every month at 1 AM)


stop options:

	stop <pool>

list options:

	list <pool>

	List all scrub schedules for a pool.
	If no pool is given it will list schedules for all pools.
"
};

help_snapshot()
{
 title
 echo "Help snapshot

Manage snapshots

Usage:

  lpreserver snapshot <subcommand> <options>

Available subcommands:

      create - Create a snapshot of a dataset
      remove - Remove a snapshot of a dataset
      revert - Revert to a snapshot of a dataset
        list - List snapshots of a dataset


create options:

	create <dataset> <snapshotname> <comment>

	Example:

	lpreserver snapshot create tank1/usr/home/kris mysnapshot

	lpreserver snapshot create tank1/usr/home/kris mysnapshot \"Added user bob\"

	NOTE:
	By default snapshots are recursive and will create snapshots
	of all children datasets automatically. To change this use:

	# lpreserver set recursive off

remove options:

	remove <dataset> <snapshotname>

	Example:

	lpreserver snapshot remove tank1/usr/home/kris auto-2012-01-25-18-00-00

	NOTE:
	By default snapshots are recursive and will remove snapshots
	of all children datasets automatically. To change this use:

	# lpreserver set recursive off

revert options:

	revert <dataset> <snapshotname>

	Example:

	lpreserver snapshot revert tank1/usr/home/kris auto-2012-01-25-18-00-00

list options:

	list <dataset>

	Example:

	lpreserver snapshot list tank0/usr/home/kris

"
};


check_migrate()
{
   # Check if we need to update the flags on replication to new format
   if [ ! -e "${DBDIR}/.replicationng" -a -e "${REPCONF}" ] ; then
     echo "Updating replication tag system..."
     echo "Please be patient, this is only done once..."
     while read repLine
     do
       local LDATA=`echo $repLine | cut -d ':' -f 1`
       local REPHOST=`echo $repLine | cut -d ':' -f 3`

       local lastSEND=`zfs get -d 1 backup:lpreserver ${LDATA} | grep LATEST | awk '{$1=$1}1' OFS=" " | tail -1 | cut -d '@' -f 2 | cut -d ' ' -f 1`

       if [ -z "$lastSEND" ] ; then continue ; fi

       # Remove the old flag format and set the new one
       zfs set backup:lpreserver=' ' ${LDATA}@${lastSEND}
       zfs set lpreserver:${REPHOST}=LATEST ${LDATA}@${lastSEND}

     done < ${REPCONF}

     # Touch our marker so we don't need to do this again
     touch "${DBDIR}/.replicationng"
   fi

   # Put other migration functionality as needed here
}

# Check if we need to enable the zfs monitor
enable_watcher

# See if we need to upgrade flags on replication
check_migrate

# Check what the user wants to do
case "$1" in

   help) case "$2" in
           get) help_get ;;
           set) help_set ;;
           snapshot) help_snapshot ;;
           replicate) help_replicate ;;
           cronsnap) help_cronsnap ;;
           cronscrub) help_cronscrub ;;
           status) help_status ;;
           *) help_main ;;
         esac  ;;

    get) require_root
	 # Display our options
	 title
	 echo "               Recursive mode: $RECURMODE"
	 echo "            Prune remote mode: $PRUNEREMOTEMODE"
	 echo "         E-mail notifications: $EMAILMODE"
	 echo "             E-mail addresses: $EMAILADDY"
	 echo "           Disk space warn at: ${DUWARN}%"
	 echo "Disk space prune snapshots at: ${DUPRUNE}%"
	 exit 0
         ;;

    set) require_root
	 OPT="${2}"

	 case $OPT in
        emailopts) case $3 in
		  ALL|WARN|ERROR) echo "E-Mail mode set to: $3"
			          echo "$3" > ${DBDIR}/emaillevel ;;
		     *) exit_err "Unknown option" ;;
		   esac
		   ;;
            email) echo "Setting email notification to: $3"
	           echo "$3" > ${DBDIR}/emails ;;
           duwarn) if [ ! $(is_num "$3") ] ; then exit_err "Invalid number, must be 0-99"; fi
		   echo "Setting disk space warning capacity to: ${3}%"
	           echo "$3" > ${DBDIR}/duwarn ;;
          duprune) if [ ! $(is_num "$3") ] ; then exit_err "Invalid number, must be 0-99"; fi
		   echo "Setting disk space snapshot prune to: ${3}%"
	           echo "$3" > ${DBDIR}/duprune ;;
        recursive) case $3 in
		  OFF|Off|off)  echo "Recursive mode disabled"
			        touch ${DBDIR}/recursive-off ;;
		     ON|On|on)  echo "Recursive mode enabled"
			        rm ${DBDIR}/recursive-off 2>/dev/null ;;
		     *) exit_err "Unknown option" ;;
		   esac
		   ;;
      pruneremote) case $3 in
		  OFF|Off|off)  echo "Automatic pruning of remote datasets disabled"
			        rm ${DBDIR}/pruneremote-on 2>/dev/null ;;
		     ON|On|on)  echo "Automatic pruning of remote datasets enabled"
			        touch ${DBDIR}/pruneremote-on ;;
		     *) exit_err "Unknown option" ;;
		   esac
		   ;;
                *) exit_err "Invalid option!" ;;
       esac
       ;;


 snapshot) shift
	    case ${1} in
               create) require_root
                       DATASET="$2"
                       SNAPNAME="$3"
                       COMMENT="$4"
                       ${PROGDIR}/backend/zfsmksnap.sh "${DATASET}" "$SNAPNAME" "$COMMENT"
                     ;;
                 list) require_root
                       DATASET="$2"
                       ${PROGDIR}/backend/zfslistsnap.sh "${DATASET}"
                     ;;
               revert) require_root
                       DATASET="$2"
                       SNAP="$3"
                       ${PROGDIR}/backend/zfsrevertsnap.sh "${DATASET}" "$SNAP"
                       exit $?
                     ;;
               remove) require_root
                       DATASET="$2"
                       SNAP="$3"
                       ${PROGDIR}/backend/zfsrmsnap.sh "${DATASET}" "${SNAP}"
                       exit $?
                     ;;
		*) help_snapshot ;;
	    esac
	 ;;


 cronsnap) shift
	    case ${1} in
		start) require_root ;
		       ACTION="${1}"
                       DATASET="${2}"
		       TIME="${3}"
		       COUNT="${4}"
                       ${PROGDIR}/backend/zfscronsnap.sh "${ACTION}" "${DATASET}" "${TIME}" "${COUNT}"
		     ;;
		 stop) require_root ;
		       ACTION="${1}"
                       DATASET="${2}"
                       ${PROGDIR}/backend/zfscronsnap.sh "${ACTION}" "${DATASET}"
		     ;;
                 list)
                       ACTION="${1}"
                       DATASET="${2}"
                       ${PROGDIR}/backend/zfscronsnap.sh "${ACTION}" "${DATASET}"
                     ;;
               exclude) require_root ;
                       ${PROGDIR}/backend/zfscronsnap.sh "${@}"
                     ;;
             rmexclude) require_root ;
                       ${PROGDIR}/backend/zfscronsnap.sh "${@}"
                     ;;
           listexclude)
                       ACTION="${1}"
                       DATASET="${2}"
                       ${PROGDIR}/backend/zfscronsnap.sh "${ACTION}" "${DATASET}"
                     ;;
		*) help_cronsnap ;;
	    esac
	 ;;

 cronscrub) shift
	    case ${1} in
		start) require_root ;
		       ACTION="${1}"
                       POOL="${2}"
		       TIME="${3}"
                       ${PROGDIR}/backend/zfscronscrub.sh "${ACTION}" "${POOL}" "${TIME}"
                     ;;
		stop) require_root ;
		       ACTION="${1}"
                       POOL="${2}"
                       ${PROGDIR}/backend/zfscronscrub.sh "${ACTION}" "${POOL}"
                     ;;
		list)
		       ACTION="${1}"
                       POOL="${2}"
                       ${PROGDIR}/backend/zfscronscrub.sh "${ACTION}" "${POOL}"
                     ;;
		*) help_cronscrub ;;
	    esac
	 ;;

    status) listStatus
         ;;
 replicate) shift
	    case ${1} in
		add) require_root ;
		     if [ "$2" = "iscsi" ] ; then
                        if ! isZFSvalid "$4"; then
                          exit_err "${4} is not a valid dataset!"
                        fi
		       add_rep_iscsi_task "$3" "$4" "$5" "$6"
		     else
                        if ! isZFSvalid "$5"; then
                          exit_err "${5} is not a valid dataset!"
                        fi
		       add_rep_task "$2" "$3" "$4" "$5" "$6" "$7"
		     fi
		     ;;
		expand) require_root ; expand_iscsi_zpool "$2" "$3" ;;
		export) require_root ; export_iscsi_zpool "$2" "$3" ;;
		import) require_root ; import_iscsi_zpool "$2" "$3" ;;
		init) require_root ; init_rep_task "$2" "$3" ;;
		list) list_rep_task ;;
                remove) require_root
                        if [ -z $2 ] || [ -z $3 ]; then
                           exit_err "Please specify <dataset> and <target host>"
                        fi
                        cat ${REPCONF} | awk -F ':' '{ print $1 }' | grep -q "^${2}\$"
                        if [ $? -ne 0 ] ; then
                           exit_err "No such replication task for dataset $2"
                        fi
                        cat ${REPCONF} | awk -F ':' '{ print $3 }' | grep -q "^${3}\$"
                        if [ $? -ne 0 ] ; then
                           exit_err "No such replication task for target host $3"
                        fi
                        rem_rep_task "$2" "$3"
                        echo "Removed replication task for dataset $2, target host $3"
                        ;;
		 run) require_root ;
		      ${PROGDIR}/backend/runrep.sh "$2" "$3"
		      exit $?
		      ;;
           saveiscsi)
                      if [ "$2" = "openssl" ] ; then
                        require_root ; save_iscsi_zpool_data "openssl" "$3" "$4" "$5"
                      elif [ "$2" = "geli" ] ; then
                        require_root ; save_iscsi_zpool_data "geli" "$3" "$4" "$5"
                      else
                        require_root ; save_iscsi_zpool_data "geli" "$2" "$3" "$4"
                      fi
                      ;;

             exclude) require_root ;
                      DATASET="${2}"
                      if ! isZFSvalid "$DATASET"; then
                        exit_err "${DATASET} is not a valid dataset!"
                      fi
                      # Shift the arguments so we only have dataset excludes left in $@
                      shift 2
                      add_exclude "${DATASET}" "rep" "${@}"
                     ;;
           rmexclude) require_root ;
                      DATASET="${2}"
                      # Shift the arguments so we only have dataset exclude removals left in $@
                      shift 2
                      remove_exclude "${DATASET}" "rep" "${@}"
                     ;;
         listexclude)
                     list_exclude "$2" "rep"
                     ;;
         pruneremote) require_root
                     if [ -z $2 ] || [ -z $3 ]; then
                       exit_err "Please specify <dataset> and <target host>"
                     fi
                     cat ${REPCONF} | awk -F ':' '{ print $1 }' | grep -q "^${2}\$"
                     if [ $? -ne 0 ] ; then
                       exit_err "No such replication task for dataset $2"
                     fi
                     cat ${REPCONF} | awk -F ':' '{ print $3 }' | grep -q "^${3}\$"
                     if [ $? -ne 0 ] ; then
                        exit_err "No such replication task for target host $3"
                     fi
                     prune_remote_rep_task "$2" "$3"
                     ;;
                *) help_replicate ;;
            esac
         ;;
   *) help_main ;;
esac

exit 0
